<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/task 
		http://www.springframework.org/schema/task/spring-task-3.1.xsd
		http://www.springframework.org/schema/tx
	    http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

	<!-- Activates various annotations to be detected in bean classes: Spring's 
		@Required and @Autowired, as well as JSR 250's @PostConstruct, @PreDestroy 
		and @Resource (if available) and JPA's @PersistenceContext and @PersistenceUnit 
		(if available). -->
		
	<context:annotation-config />

	<!-- Helps get the annotation based mappings and validations -->
	<mvc:annotation-driven />

	<mvc:view-controller path="/" view-name="home" />

	<!-- Instruct Spring to perform automatic transaction management on annotated 
		classes. The SimpleJdbcClinic implementation declares @Transactional annotations. -->
	<tx:annotation-driven transaction-manager="transactionManager" />


	<!-- Instruct Spring to retrieve and apply @AspectJ aspects which are defined 
		as beans in this context. -->
	<aop:aspectj-autoproxy />

	<context:component-scan base-package="com.tunaweza" />
<!--	<context:component-scan base-package="net.jforum" />-->

	<task:annotation-driven />

	<!-- Allows for the interceptor to be plugged in -->
	<!--<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"> 
		<property name="interceptors"> <list> <ref bean="openEntityManagerInViewInterceptor" 
		/> </list> </property> </bean> -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass">
			<value>
				org.springframework.web.servlet.view.tiles2.TilesView
			</value>
		</property>
	</bean>

	<bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="mediaTypes">
			<map>
				<entry key="atom" value="application/atom+xml" />
				<entry key="xls" value="application/x-excel" />
				<entry key="pdf" value="application/pdf" />
				<entry key="html" value="text/html" />
				<entry key="json" value="application/json" />
			</map>
		</property>
	</bean>


	<bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/tiles-defs/main.xml</value>
			</list>
		</property>
	</bean>

	<!--Application Message Bundle -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource"
		p:basename="messages" />


	<!--Interceptor to allow for lazy loading --><!-- <bean id="openEntityManagerInViewInterceptor" class="org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor"> 
		<property name="entityManagerFactory" ref="entityManagerFactory" /> </bean> -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="10485760" />
	</bean>
</beans>